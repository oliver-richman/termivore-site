{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Termivore","text":"<p>Feed your hunger for beautiful CLI interfaces with Termivore</p> <p>Termivore is an all-in-one package for creating command-line interface (CLI) projects. With Termivore, you can quickly and easily create custom CLI projects from scratch or use specific features as needed. It's written in TypeScript but can also be used with JavaScript. Termivore includes several CLI tools such as logging, customizable loading spinners, and prompts for user input or allowing the user to select a choice from a list.</p> <p>To get started with termivore, follow our getting started guide here:</p> <p>Getting Started with Termivore</p>"},{"location":"getting-started/","title":"Getting Started with Termivore","text":"<p>Creating a CLI with Termivore is pretty simple, however there a two approaches based on your project's needs.</p> <p>You can either use the Termivore CLI (recommended) or manually import the Termivore features you need. If you haven't started building your CLI yet, or want to start over then we would highly recommend using the Termivore CLI</p>"},{"location":"getting-started/#termivore-cli","title":"Termivore CLI","text":"<p>Using the Termivore CLI will allow you to quickly spin up a new project with everything you need to get started.</p> <p>Firstly, you'll want to install Termivore globally: <pre><code>npm i -g termivore\n</code></pre></p> <p>You probably already will, but you might want to</p> <p>Ensure you have both node and npm installed on your machine. We would recommend using a tool such as NVM to handle your node/npm versions</p> <p>Once you have Termivore installed globally, you can now have access to the <code>termivore</code> command within your console. To create a new Termivore CLI project for the first time you can just run: <pre><code>termivore create\n</code></pre></p> <p>This will run you through a series of questions to setup your new CLI to your preferences.</p> <p>If you'd rather not answer a bunch of questions there are arguments and options you can pass to <code>termivore create</code> which will allow you to define your preferences ahead of time:</p>"},{"location":"getting-started/#arguments","title":"Arguments","text":"Argument Description <code>&lt;project-name&gt;</code> The name of the project and directory to create <code>&lt;root-command&gt;</code> The root command of your cli, e.g. Termivore's root command is 'termivore'"},{"location":"getting-started/#options","title":"Options","text":"Option Description Alternatives <code>--language</code> The language of your project, must be either 'TypeScript' or 'JavaScript' <code>-l</code>, <code>--lang</code> <code>--no-help</code> Use this flag if you don't want a help command to be created <code>-nh</code> <code>--no-version</code> Use this flag if you don't want a -v flag to show your CLIs version <code>-nv</code> <code>--linting-preference</code> Specify your linting preference, 'both', 'eslint', 'prettier', 'none' <code>-lp</code>, <code>--lint</code> <code>--no-git</code> Use this flag if you don't want to init this project as a git repository <code>-ng</code>"},{"location":"getting-started/#examples","title":"Examples","text":""},{"location":"getting-started/#typescript-eslint-prettier-cli","title":"TypeScript, ESLint, Prettier CLI","text":"<p>Create a new Termivore CLI called <code>my-project</code> with a root command of <code>mp</code>. Use TypeScript, ESlint and Prettier. By default this will initialise the new project as a git repository and create a help command and add the functionality for <code>-v</code>. <pre><code>termivore create my-project mp --lang=TypeScript --lint=both\n</code></pre></p>"},{"location":"getting-started/#javascript-no-linting-no-git-no-extras","title":"JavaScript, No Linting, No Git, No Extras","text":"<p>Create a new Termivore CLI called <code>very-cool-project</code> with a root command of <code>vcp</code>. Uses JavaScript with no linting or formatting. It also disables the help command and the version option. Also, because we have passed <code>-ng</code> it won't initialise a git repository. <pre><code>termivore create very-cool-project vcp --lang=JavaScript --lint=none -ng -nv -nh\n</code></pre></p>"},{"location":"getting-started/#manual-use","title":"Manual Use","text":"<p>If you're just wanting to use some of Termivores features in an existing project or you prefer to approach CLI creation in a different way, you can manually add elements of Termivore to your package.</p> <p>First of all, install Termivore as a dependency in your project: <pre><code>npm i termivore\n</code></pre></p> <p>Next you'll want to import the feature(s) you want to use:</p> TypeScript/ES6JavaScript/CommonJS <pre><code>import { log } from 'termivore';\nlog('This log is green!').green().print();\n</code></pre> <pre><code>const termivore = require('termivore');\ntermivore.log('This log is green!').green().print();\n</code></pre>"},{"location":"node-cli-info/","title":"Node.js/NPM CLI Information","text":"<p>Creating a CLI with Termivore is pretty easy, especially if you use the Termivore CLI to do so. However, if you have opted not to setup your CLi with the Termivore CLI, or you want to know more about how it works then please read this page.</p>"},{"location":"node-cli-info/#your-packagejson-file","title":"Your <code>package.json</code> File","text":"<p>There are a few things you will want (and need) to do with your project's <code>package.json</code> file before you can start using your CLI.</p>"},{"location":"node-cli-info/#basic-requirements-for-your-packagejson","title":"Basic requirements for your package.json","text":"<pre><code>{\n\"name\": \"my-cli\",\n\"version\": \"1.0.0\",\n\"bin\": {\n\"my-root-command\": \"path/to/entry/file.js\"\n}\n}\n</code></pre>"},{"location":"node-cli-info/#name","title":"Name","text":"<p>You will be required to have a name which you most likely already will have. One thing to keep in mind with the name field in your <code>package.json</code> is that if you intend to publish your CLI as a package you will need to ensure the name isn't already in use by another package. If you're not publishing your package publically, then this isn't as important.</p>"},{"location":"node-cli-info/#scoped-packages","title":"Scoped Packages","text":"<p>You may have noticed some packages are <code>scoped</code> meaning the package name is prefixed with <code>@organisation-name/</code>. This is totally possible with Termivore, just ensure the name in your <code>package.json</code> includes the scope. For example if you have an organisation on NPM called 'my-org' you wish to publish your package to, you'll need to set the <code>package.json</code> name to <code>@my-org/package-name</code>.</p> <p>See more about NPM scopes here</p>"},{"location":"node-cli-info/#version","title":"Version","text":"<p>The version field is pretty straight forward, you just need to have a valid version string assigned to it. It's recommended you follow semantic versioning(semver) rules though. This means you have a <code>MAJOR.MINOR.PATCH</code> formatted version.</p> <p>Read more about Semantic Versioning</p>"},{"location":"node-cli-info/#bin","title":"Bin","text":"<p>The bin field in your <code>package.json</code> is where you define what your CLI's root command will be and the file that will be executed when someone runs said command. You can have multiple root commands if you wish to.</p> <p>To ensure your command will run properly, you can define your bin field like so: <pre><code>{\n...\n\"bin\": {\n\"my-root-command\": \"path/to/entry/file.js\"\n}\n...\n}\n</code></pre></p> <p>If you had multiple root commands you would just add them to the bin object. If you want to make it cleaner and your root command is the same as your package.json name you can define it like this:</p> <pre><code>{\n\"name\": \"my-cli\",\n\"bin\": \"path/to/entry/file.js\"\n}\n</code></pre> <p>Which would be the same as doing: <pre><code>{\n\"name\": \"my-cli\",\n\"bin\" {\n\"my-cli\": \"path/to/entry/file.js\"\n}\n}\n</code></pre></p> <p>Read more about the package.json bin field</p>"},{"location":"node-cli-info/#your-clis-entry-file","title":"Your CLI's 'Entry' File","text":"<p>There's one more thing to do to ensure your CLI works as intended once you've got your <code>package.json</code> file set up correctly, and that happens in the entry file you defined in the <code>bin</code> field.</p> <p>You will need to make your file exectuable which you do by including this line at the top of your file (before anything else in the file) <pre><code>#!/usr/bin/env node\n</code></pre></p> <p>If this line isn't at the top of the file you declared as your entry file in your <code>package.json</code> bin field then it won't work when someone tries to use your CLI.</p>"},{"location":"node-cli-info/#using-your-cli-locally","title":"Using your CLI locally","text":"<p>We have a whole page on using your CLI locally which you can see here.</p>"},{"location":"node-cli-info/#publishing-your-cli","title":"Publishing your CLI","text":"<p>We have a whole page on publishing your CLI which you can see here.</p>"},{"location":"publishing-your-cli/","title":"Publishing Your CLI","text":""},{"location":"using-your-cli-locally/","title":"Using Your CLI Locally","text":""},{"location":"features/cli-commands/","title":"CLI Commands","text":"<p>Termivore has a built in way to create a CLI with functioning commands, plus some built in features such as a help command and a -v version flag.</p> <p>If you're looking to setup a new CLI, it's recommended you use the termivore CLI to spin up your project, if you wish to do it manually you can follow this section.</p>"},{"location":"features/cli-commands/#create-the-cli","title":"Create the CLI","text":"<p>Set up your command</p> <p>To actually use your CLI, you will need to setup a few things first, please see our page on Node.js/NPM CLI Information</p> <p>Once your package.json file is setup correctly and you have made your entry file executable you can use Termivore's <code>CLI</code> class to create your CLI.</p> <p>You can do this like so:</p> TypeScript/ES6JavaScript/CommonJS <pre><code>#!/usr/bin/env node\nimport { CLI } from 'termivore';\nconst myCli = new CLI('rootCommand', { version: '1.0.0' });\n// Commands go here\nmyCli.start()\n</code></pre> <pre><code>#!/usr/bin/env node\nconst termivore = require('termivore');\nconst myCli = new termivore.CLI('rootCommand', { version: '1.0.0' });\n// Commands go here\nmyCli.start()\n</code></pre> <p>The above will create and start a CLI (with no commands, yet...) which will have a help command and a -v option for checking version. See the next section for adding commands to your CLI.</p> <p>Ensure that you don't attempt to add commands or alter <code>myCli</code> (or whatever your CLI variable is named) after you call the <code>start()</code> command as those additions won't be reflected in the CLI.</p>"},{"location":"features/cli-commands/#add-a-command","title":"Add a Command","text":""},{"location":"features/cli-commands/#add-arguments-to-a-command","title":"Add Arguments to a Command","text":""},{"location":"features/cli-commands/#add-options-to-a-command","title":"Add options to a Command","text":""},{"location":"features/logger/","title":"Logger","text":"<p>Termivore's <code>log()</code> function is a useful and versatile method that will be able to tackle most of your logging needs. It can log out in a variety of preset colors, as well as specific hex and rgb colors. You also have the ability to pass in your own ANSI codes if you need to do something a little more complex.</p>"},{"location":"features/logger/#basic-use","title":"Basic Use","text":"<p>The most basic use of the Termivore logger is like this:</p> TypeScript/ES6JavaScript/CommonJS <pre><code>import { log } from 'termivore';\nlog('I log to the console').print();\n</code></pre> <pre><code>const termivore = require('termivore');\ntermivore.log('I log to the console').print();\n</code></pre> <p>The most important thing to remember is to always end a log function with a chained <code>.print()</code> as this is what triggers the log to be printed to the console. There a few reasons for this, but it's mainly to allow the use of chaining styles, appending logs, etc.</p>"},{"location":"features/logger/#adding-color","title":"Adding Color","text":"<p>There's a variety of preset methods you can chain to <code>log()</code> to change the color of your log, both text color and background color. However, if there's a specific hex code or RGB color you wish to use, then don't worry, this is also possible with the log function!</p>"},{"location":"features/logger/#text-color","title":"Text Color","text":"<p>You can change the color of your log text very simply, by doing:</p> TypeScript/ES6JavaScript/CommonJS <pre><code>import { log } from 'termivore';\nlog('I\\'m blue!').blue().print();\n</code></pre> <pre><code>const termivore = require('termivore');\ntermivore.log('I\\'m blue!').blue().print();\n</code></pre> <p>Available preset colors</p> <p>To see a full list of the preset colors you can set, by chaining methods like above, please see the Chainable Methods section of this page</p>"},{"location":"features/logger/#background-color","title":"Background Color","text":"<p>Changing the background color of your log is just as easy as changing the text color, every available method you can chain to change the color also has a <code>Bg</code> counterpart:</p> TypeScript/ES6JavaScript/CommonJS <pre><code>import { log } from 'termivore';\nlog('My background is blue!').blueBg().print();\n</code></pre> <pre><code>const termivore = require('termivore');\ntermivore.log('My background is blue!').blueBg().print();\n</code></pre> <p>If you wish to change both the text and background color of a log you can simply chain up the commands:</p> TypeScript/ES6JavaScript/CommonJS <pre><code>import { log } from 'termivore';\nlog('My text is black, my background is white!').black().whiteBg().print();\n</code></pre> <pre><code>const termivore = require('termivore');\ntermivore.log('My text is black, my background is white!').black().whiteBg().print();\n</code></pre>"},{"location":"features/logger/#adding-styles","title":"Adding Styles","text":"<p>As well as colors, there is also a variety of styles you can add to your logs too</p> TypeScript/ES6JavaScript/CommonJS <pre><code>import { log } from 'termivore';\nlog('This text is bold').bold().print();\nlog('This text is in italics').italic().print();\nlog('This text is underlined').underline().print();\n</code></pre> <pre><code>const termivore = require('termivore');\ntermivore.log('This text is bold').bold().print();\ntermivore.log('This text is in italics').italic().print();\ntermivore.log('This text is underlined').underline().print();\n</code></pre>"},{"location":"features/logger/#log-replacement-deletion","title":"Log Replacement &amp; Deletion","text":"<p>The log function isn't just colors and styles, you can also manipulate the logs that have already been printed to the console.</p>"},{"location":"features/logger/#replace-an-already-printed-log","title":"Replace an already printed log","text":"<p>If you've printed a log to the console and then wish to change it, you can do:</p> TypeScript/ES6JavaScript/CommonJS <pre><code>import { log } from 'termivore';\nconst logId = log('Previous text').print();\nlog('Changed text', logId).print();\n</code></pre> <pre><code>const termivore = require('termivore');\nconst logId = termivore.log('Previous text').print();\ntermivore.log('Changed text', logId).print();\n</code></pre>"},{"location":"features/logger/#remove-an-already-printed-log","title":"Remove an already printed log","text":"<p>Removing a log from the console after it's printed works the same way as replacing a printed log, however you just pass a blank string</p> TypeScript/ES6JavaScript/CommonJS <pre><code>import { log } from 'termivore';\nconst logId = log('I am going to be removed').print();\nlog('', logId).print();\n</code></pre> <pre><code>const termivore = require('termivore');\nconst logId = termivore.log('I am going to be removed').print();\ntermivore.log('', logId).print();\n</code></pre>"},{"location":"features/logger/#appending","title":"Appending","text":"<p>Creating complex logs with appended text is made simple with Termivore, wether you just want to add another string to your log, or specifically style elements of your log text.</p>"},{"location":"features/logger/#appending-text","title":"Appending text","text":"<p>If you're doing more complex logic with your logs and wish to append text to a log before you print it then this is possible with the chainable <code>append</code> method. As with all the log's chainable methods you don't have to do it all in one, you can assign the log to a variable and update it with appends (or any chainable method) until you're ready to print it.</p> TypeScript/ES6JavaScript/CommonJS <pre><code>import { log } from 'termivore';\nlog('All').append('one').append('log!').print();\nconst greetingLog = log('Hello,');\ngreetingLog.append(name).print();\n</code></pre> <pre><code>const termivore = require('termivore');\ntermivore.log('All').append('one').append('log!').print();\nconst greetingLog = termivore.log('Hello,');\ngreetingLog.append(name).print();\n</code></pre>"},{"location":"features/logger/#appending-a-log","title":"Appending a <code>log()</code>","text":"<p>When you append to a log, it doesn't always have to be a string, it can also be another <code>log</code>. For example if you wanted to print a message to the console where one part of the message is styled differently, appending a log might be the best solution:</p> TypeScript/ES6JavaScript/CommonJS <pre><code>import { log } from 'termivore';\nconst boldGreenName = log(`${name}!`).green().bold();\nlog('Hello,').append(boldGreenName).append('Nice to meet you!').print();\n</code></pre> <pre><code>const termivore = require('termivore');\nconst boldGreenName = termivore.log(`${name}!`).green().bold();\ntermivore.log('Hello,').append(boldGreenName).append('Nice to meet you!').print();\n</code></pre>"},{"location":"features/logger/#chainable-methods","title":"Chainable Methods","text":"<p>There are many available methods you can chain to the <code>log</code> method before finally chaining <code>print</code>, some of which you may have seen in the examples above, here is the full list of methods you can chain to a <code>log()</code>.</p> Method Arguments Description Example <code>append</code> appendedMessage: string or Logger Used to join a string or new log to an existing log 'original log message appended red message' <code>bold</code> n/a Used to change the text to be bold bold text <code>dim</code> n/a Used to change the text to be dim dimmed text <code>italic</code> n/a Used to change the text to be italic italic text <code>underline</code> n/a Used to change the text to be underlined underlined text <code>black</code> n/a Changes the text color to black black text <code>blackBg</code> n/a Changes the log's background color to black black background <code>red</code> n/a Changes the text color to red  red text <code>redBg</code> n/a Changes the log's background color to red red background <code>green</code> n/a Changes the text color to green  green text <code>greenBg</code> n/a Changes the log's background color to green green background <code>yellow</code> n/a Changes the text color to yellow  yellow text <code>yellowBg</code> n/a Changes the log's background color to yellow yellow background <code>blue</code> n/a Changes the text color to blue  blue text <code>blueBg</code> n/a Changes the log's background color to blue blue background <code>magenta</code> n/a Changes the text color to magenta  magenta text <code>magentaBg</code> n/a Changes the log's background color to magenta magenta background <code>cyan</code> n/a Changes the text color to cyan  cyan text <code>cyanBg</code> n/a Changes the log's background color to cyan cyan background <code>white</code> n/a Changes the text color to white  white text <code>whiteBg</code> n/a Changes the log's background color to white white background <code>rgb</code> rgb: string[] or r: string, g: string, b: string Changes the text color to the RGB color provided  rgb(246, 118, 74) text <code>rgbBg</code> rgb: string[] or r: string, g: string, b: string Changes the log's background color to the RGB color provided rgb(246, 118, 74) background <code>hex</code> hexCode: string Changes the text color to the hex code color provided  #937490 text <code>hexBg</code> hexCode: string Changes the log's background color to the hex code color provided #937490 background <code>ansi</code> ansiCode: string Adds the provided ANSI code to the beginning of the log so that the ANSI code action is performed for the log"},{"location":"features/open-link/","title":"Open Link","text":"<p>If you want your CLI to trigger the opening of a webpage you can do so with Termivore's <code>openLink</code> method. This is useful for linking to documentation, external resources or even opening up a local url for your application.</p> TypeScript/ES6JavaScript/CommonJS <pre><code>import { openLink } from 'termivore';\nopenLink('https://www.termivore.com');\n</code></pre> <pre><code>const termivore = require('termivore');\ntermivore.openLink('https://www.termivore.com');\n</code></pre>"},{"location":"features/prompt/","title":"Prompt","text":""},{"location":"features/spinner/","title":"Spinner","text":""}]}